<beans:beans xmlns="http://www.springframework.org/schema/security" xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.1.xsd">

	<http use-expressions="true">
		<intercept-url pattern="/*.html" access="permitAll" />
		<intercept-url pattern="/static/*/*" access="permitAll" />
		<intercept-url pattern="/uploads/*" access="permitAll" />
		<intercept-url pattern="/index.jsp" access="permitAll" />
		<intercept-url pattern="/favicon.ico" access="permitAll" />
		<intercept-url pattern="/home/**" access="permitAll" />
		<intercept-url pattern="/signUp/**" access="permitAll" />
		<intercept-url pattern="/spots/**" access="isAuthenticated()" />
		<intercept-url pattern="/operations/**" access="isAuthenticated()" />
	    <intercept-url pattern="/dashboard/**" access="isAuthenticated()" />
	    <intercept-url pattern="/**" access="denyAll" />
	    		
	    <form-login login-page="/home" default-target-url="/dashboard" authentication-failure-url="/home?error=failed" />
		<!-- form-login login-page="/home"  authentication-failure-url="/loginfailed" / -->
		<logout logout-success-url="/logout" />
	</http>

	<!-- <authentication-manager>
		<authentication-provider>
			<jdbc-user-service data-source-ref="dataSource"
				users-by-username-query="SELECT email, password, enabled FROM users WHERE email = ?"
				authorities-by-username-query="SELECT u.email, ur.authority FROM users u, user_roles ur WHERE u.user_id = ur.user_id AND u.email = ?" />
		</authentication-provider>
	</authentication-manager> -->
	
	<beans:bean id="daoAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<beans:property name="userDetailsService" ref="userService" />
		<!-- <beans:property name="passwordEncoder">
      		<beans:bean class="org.springframework.security.authentication.encoding.ShaPasswordEncoder">
	         	<beans:constructor-arg value="256"/>
	         	<beans:property name="iterations" value="1" />
      		</beans:bean>
   		</beans:property>
	   <beans:property name="saltSource">
	      <beans:bean class="org.springframework.security.authentication.dao.ReflectionSaltSource">
	         <beans:property name="userPropertyToUse" value="salt" />
	      </beans:bean>
	   </beans:property> -->
	</beans:bean>


	<beans:bean id="authenticationManager" class="org.springframework.security.authentication.ProviderManager">
		<beans:property name="providers">
			<beans:list>
				<beans:ref local="daoAuthenticationProvider" />
			</beans:list>
		</beans:property>
	</beans:bean>

	<authentication-manager>
		<authentication-provider user-service-ref="userService">
			<password-encoder ref="passwordEncoder">
				<salt-source ref="saltSource"/>
			</password-encoder>			
		</authentication-provider>
	</authentication-manager>
	
	<beans:bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder">
		<beans:constructor-arg value="256"/>
		<beans:property name="iterations" value="1500"/>
	</beans:bean>
	
	<beans:bean id="saltSource" class="org.springframework.security.authentication.dao.ReflectionSaltSource">
		<beans:property name="userPropertyToUse" value="salt" />
	</beans:bean>
</beans:beans>